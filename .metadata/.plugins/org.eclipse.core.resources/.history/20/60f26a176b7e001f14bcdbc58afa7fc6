package Entities;

public class Lista {

	Bloco inicio;

	public Bloco addElemento(int valor, boolean posicaoIncio) {

		Bloco novo = null;

		if (posicaoIncio == true) {

			novo = this.addElementoInicio(valor);

		} else {

			novo = this.addElementoFim(valor);
		}

		return novo;
	}
	

	public Bloco addElemento(int valor) {

		Bloco novo = null;

		novo = this.addElementoFim(valor);

		return novo;
	}
	
	
	
	

	public Bloco removerElementoFim() {

		Bloco result = null;

		if (this.isVazia()) {
			return result;
		}

		if (this.tamanho() == 1) {
			// this.inicio = null;
			result = this.removerElementoInicio();
		} else {

			Bloco target = this.localizarBloco(this.tamanho() - 1);

			result = target.prox;
			target.prox = null;
		}

		return result;
	}

	public Bloco removerElementoInicio() {

		Bloco result = this.inicio;
		if (!this.isVazia()) {

			this.inicio = this.inicio.prox;
		}

		return result;
	}

	public boolean isVazia() {

		return this.inicio == null;
	}

	private Bloco addElementoInicio(int valor) {

		Bloco novo = new Bloco();
		novo.valor = valor;

		novo.prox = this.inicio;
		this.inicio = novo;

		return novo;
	}

	private Bloco addElementoFim(int valor) {

		Bloco novo = null;

		Bloco fim = this.localizarBloco(this.tamanho());

		if (fim == null) {

			novo = this.addElementoInicio(valor);
		} else {

			novo = new Bloco();
			novo.valor = valor;

			fim.prox = novo;
		}

		return novo;
	}

	public Bloco localizarBloco(int pos) {

		Bloco aux = this.inicio;
		int cont = 0;

		while (aux != null && cont < pos - 1) {

			cont++;
			aux = aux.prox;
		}

		return aux;
	}

	public int tamanho() {

		Bloco aux = this.inicio;
		int cont = 0;

		while (aux != null) {

			cont++;
			aux = aux.prox;
		}

		return cont;
	}

	// Questao 07 (Classe criada em sala de aula)

	public Lista inverterLista() {
	    if (this.inicio == null) {
	        return null;  // Se a lista estiver vazia, retorna null ou uma nova lista vazia
	    }

	    Bloco anterior = null;
	    Bloco atual = this.inicio;
	    Bloco proximo = null;

	    // Percorre a lista e inverte os ponteiros
	    while (atual != null) {
	        proximo = atual.prox;  // Armazena o próximo bloco
	        atual.prox = anterior;  // Inverte o ponteiro do bloco atual para o anterior
	        anterior = atual;       // Move o ponteiro anterior para o bloco atual
	        atual = proximo;        // Move o ponteiro atual para o próximo bloco
	    }

	    // Cria uma nova lista e define o início como o último elemento da lista original
	    Lista listaInvertida = new Lista();
	    listaInvertida.inicio = anterior;  // O novo início será o último bloco da lista original

	    return listaInvertida;  // Retorna a nova lista invertida
	}

	
	
	

	public void exibirLista() {
		Bloco aux = inicio;
		while (aux != null) {
			System.out.print(aux.valor + ", ");
			aux = aux.prox;
		}
	}

}
